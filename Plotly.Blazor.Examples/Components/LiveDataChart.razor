@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib

@using System.Reactive.Concurrency
@using System.Reactive.Linq
@using System.Reactive.Subjects
@using System.Threading
@using System.Diagnostics

@implements IDisposable

<PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="traces" @ref="chart" />

@code {

    private PlotlyChart chart;
    private Config config;
    private Layout layout;
    private IList<ITrace> traces;
    private IDisposable interval;

    private CancellationTokenSource cancellationToken;
    private IScheduler scheduler;

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        config = CreateConfig();
        layout = CreateLayout();
        traces = CreateTraces();
        cancellationToken = new CancellationTokenSource();
        scheduler = new TaskPoolScheduler(new TaskFactory(cancellationToken.Token));

        base.OnParametersSet();
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            interval = StartDataSimulation(50, 30);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    /// <inheritdoc />
    public void Dispose()
    {
        cancellationToken?.Cancel();
        interval.Dispose();
    }

    /// <summary>
    ///     Fires the data changed event periodically by the given milliseconds.
    /// </summary>
    /// <param name="milliseconds"></param>
    /// /// <param name="count"></param>
    private IDisposable StartDataSimulation(int milliseconds, int count)
    {
        return Observable.Interval(TimeSpan.FromMilliseconds(milliseconds), scheduler)
            .Subscribe(async l =>
            {
                (var x, var y) = Helper.GenerateData(0, count, GenerateMethod.Sin);
                (var x2, var y2) = Helper.GenerateData(0, count, GenerateMethod.Cos);

                await UpdateData(new DataJob(new DataEventArgs(x,y, 0), chart, traces));
                await UpdateData(new DataJob(new DataEventArgs(x2, y2, 1), chart, traces));
            });
    }

    /// <summary>
    ///     Updates the chart by using the given data job.
    /// </summary>
    /// <param name="job">DataJob</param>
    /// <returns>Task</returns>
    private async Task UpdateData(DataJob job)
    {
        if ((!job?.DataEventArgs?.X?.Any() ?? true) || (!job?.DataEventArgs?.Y?.Any() ?? true) || job.Chart == null || job.Traces == null || job.DataEventArgs.TraceIndex < 0)
        {
            return;
        }

        var stopwatch = new Stopwatch();
        stopwatch.Restart();

        var count = job.DataEventArgs.X.Count();

        try
        {
            await InvokeAsync(async () => await job.Chart.ExtendTrace(job.DataEventArgs.X, job.DataEventArgs.Y, job.DataEventArgs.TraceIndex, count));
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            Console.WriteLine($"Render of {count} points failed after {stopwatch.ElapsedMilliseconds}ms");
            Console.WriteLine(ex);
            return;
        }

        stopwatch.Stop();
        Console.WriteLine($"Render of {count} points took {stopwatch.ElapsedMilliseconds}ms");
    }

    /// <summary>
    ///     Creates an initial config.
    /// </summary>
    /// <returns>Config</returns>
    private Config CreateConfig()
    {
        return new Config
            {
                Responsive = true
            };
    }

    /// <summary>
    ///     Creates an initial layout.
    /// </summary>
    /// <returns>Layout</returns>
    private Layout CreateLayout()
    {
        return new Layout
            {
                Title = new Title
                {
                    Text = "Live Data Simulation"
                },
                XAxis = new[]
                {
                new XAxis
                {
                    Title = new Plotly.Blazor.LayoutLib.XAxisLib.Title
                    {
                        Text = "Index"
                    },
                }
            },
                YAxis = new[]
                {
                new YAxis
                {
                    Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title
                    {
                        Text = "Value"
                    }
                }
            }
            };
    }

    /// <summary>
    ///     Creates an initial list of traces.
    /// </summary>
    /// <returns>IList&lt;ITrace&gt;</returns>
    private IList<ITrace> CreateTraces()
    {
        return new List<ITrace>
        {
            new Scatter
            {
                Name = "Trace 1",
                Mode = ModeFlag.Lines,
                X = new List<object>(),
                Y = new List<object>(),
                XAxis = "x",
                YAxis = "y"
            },
            new Scatter
            {
                Name = "Trace 2",
                Mode = ModeFlag.Lines,
                X = new List<object>(),
                Y = new List<object>(),
                XAxis = "x",
                YAxis = "y"
            }
        };
    }

    /// <summary>
    ///     Event Arguments for the Live Data Simulation.
    /// </summary>
    internal class DataEventArgs : EventArgs
    {
        public IEnumerable<object> X { get; set; }
        public IEnumerable<object> Y { get; set; }
        public int TraceIndex { get; set; }

        public DataEventArgs(IEnumerable<object> x, IEnumerable<object> y, int traceIndex)
        {
            X = x;
            Y = y;
            TraceIndex = traceIndex;
        }
    }

    /// <summary>
    ///     Defines a job, that will be enqueued with the passed data.
    /// </summary>
    internal class DataJob
    {
        public DataEventArgs DataEventArgs { get; set; }

        public PlotlyChart Chart { get; set; }

        public IList<ITrace> Traces { get; set; }

        public DataJob(DataEventArgs dataEventArgs, PlotlyChart chart, IList<ITrace> traces)
        {
            DataEventArgs = dataEventArgs;
            Chart = chart;
            Traces = traces;
        }
    }
    
}